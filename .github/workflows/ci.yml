name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: secret
          MYSQL_DATABASE: laravel_pix_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    # 1. Faz o checkout do c√≥digo na raiz
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Configura o PHP
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, redis
        coverage: xdebug

    # 3. Cache das depend√™ncias do Composer
    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: backend/vendor
        key: ${{ runner.os }}-php-${{ hashFiles('backend/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    # 4. Instala as depend√™ncias do PHP
    - name: Install PHP dependencies
      working-directory: ./backend
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    # 5. Configura o Node.js para frontend
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    # 6. Cache das depend√™ncias NPM do frontend
    - name: Cache Frontend NPM dependencies
      uses: actions/cache@v3
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-frontend-npm-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-frontend-npm-

    # 7. Cache das depend√™ncias NPM do backend
    - name: Cache Backend NPM dependencies
      uses: actions/cache@v3
      with:
        path: backend/node_modules
        key: ${{ runner.os }}-backend-npm-${{ hashFiles('backend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-backend-npm-

    # 8. Instala depend√™ncias NPM do frontend
    - name: Install Frontend NPM dependencies
      working-directory: ./frontend
      run: npm ci

    # 9. Instala depend√™ncias NPM do backend
    - name: Install Backend NPM dependencies
      working-directory: ./backend
      run: npm install

    # 10. Copia o arquivo de ambiente
    - name: Copy environment file
      working-directory: ./backend
      run: cp .env.testing .env

    # 11. Gera a chave da aplica√ß√£o
    - name: Generate application key
      working-directory: ./backend
      run: php artisan key:generate

    # 12. Roda as migrations
    - name: Run database migrations
      working-directory: ./backend
      run: php artisan migrate --force

    # 13. Build do frontend React/TypeScript
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    # 14. Executa testes do frontend com coverage
    - name: Execute Frontend tests
      working-directory: ./frontend
      run: npm run test:coverage -- --run

    # 15. Build assets do backend
    - name: Build backend assets
      working-directory: ./backend
      run: npm run build

    # 16. Executa os testes do backend com cobertura (PHPUnit 10+)
    - name: Execute Backend tests
      working-directory: ./backend
      run: php artisan test --env=testing --coverage --coverage-clover coverage.xml

    # 17. Verifica cobertura m√≠nima frontend (80%)
    - name: Check Frontend coverage (80%)
      working-directory: ./frontend
      run: |
        echo "üìä Verificando cobertura do frontend..."
        
        # Verifica se o arquivo de cobertura existe
        if [ ! -f "coverage/coverage-summary.json" ]; then
          echo "‚ùå Arquivo coverage-summary.json n√£o encontrado!"
          echo "üîç Verifique se os testes geraram o relat√≥rio de cobertura"
          exit 1
        fi
        
        # Extrai cobertura do arquivo JSON do Vitest
        COVERAGE_PERCENT=$(node -e "const coverage = require('./coverage/coverage-summary.json'); console.log(coverage.total.statements.pct);")
        
        echo "üìä Cobertura frontend: $COVERAGE_PERCENT%"
        echo "üéØ Cobertura m√≠nima: 80%"
        
        # Verifica se atende o m√≠nimo usando Node.js para compara√ß√£o float
        MEETS_MINIMUM=$(node -e "console.log($COVERAGE_PERCENT >= 80 ? 'yes' : 'no');")
        
        if [ "$MEETS_MINIMUM" = "yes" ]; then
          echo "‚úÖ Cobertura frontend aprovada! ($COVERAGE_PERCENT% >= 80%)"
        else
          echo "‚ùå Cobertura frontend insuficiente! ($COVERAGE_PERCENT% < 80%)"
          echo "üîß Execute mais testes para atingir o m√≠nimo de 80%"
          exit 1
        fi

    # 18. Verifica cobertura m√≠nima backend (80%) com xmllint
    - name: Check Backend coverage (80%)
      working-directory: ./backend
      run: |
        echo "üìä Verificando cobertura do backend..."

        # Verifica se o arquivo de cobertura existe
        if [ ! -f "coverage.xml" ]; then
          echo "‚ùå Arquivo coverage.xml n√£o encontrado!"
          exit 1
        fi

        echo "üìÑ Arquivo de cobertura encontrado"

        TOTAL_STATEMENTS=$(xmllint --xpath 'string((//metrics)[last()]/@statements)' coverage.xml)
        COVERED_STATEMENTS=$(xmllint --xpath 'string((//metrics)[last()]/@coveredstatements)' coverage.xml)

        if [ -z "$TOTAL_STATEMENTS" ] || [ -z "$COVERED_STATEMENTS" ] || [ "$TOTAL_STATEMENTS" -eq 0 ]; then
          echo "‚ùå N√£o foi poss√≠vel extrair dados v√°lidos de cobertura"
          echo "üîç statements=$TOTAL_STATEMENTS, covered=$COVERED_STATEMENTS"
          exit 1
        fi

        COVERAGE_PERCENT=$(awk "BEGIN {printf \"%.1f\", ($COVERED_STATEMENTS / $TOTAL_STATEMENTS) * 100}")

        echo "üìä Cobertura atual: $COVERAGE_PERCENT% ($COVERED_STATEMENTS/$TOTAL_STATEMENTS statements)"
        echo "üéØ Cobertura m√≠nima: 80.0%"

        MEETS_MINIMUM=$(awk "BEGIN {print (($COVERED_STATEMENTS / $TOTAL_STATEMENTS) >= 0.8) ? \"yes\" : \"no\"}")

        if [ "$MEETS_MINIMUM" = "yes" ]; then
          echo "‚úÖ Cobertura backend aprovada! ($COVERAGE_PERCENT% >= 80%)"
        else
          echo "‚ùå Cobertura backend insuficiente! ($COVERAGE_PERCENT% < 80%)"
          NEEDED=$(awk "BEGIN {print int(($TOTAL_STATEMENTS * 0.8) - $COVERED_STATEMENTS + 1)}")
          echo "üîß Faltam $NEEDED+ statements cobertos para atingir o m√≠nimo"
          exit 1
        fi

    # 19. Upload da cobertura backend para Codecov
    - name: Upload Backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    # 20. Upload da cobertura frontend para Codecov
    - name: Upload Frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./frontend/coverage
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

    # 21. Output final de sucesso
    - name: Success summary
      run: |
        echo "üéâ Pipeline executado com sucesso!"
        echo "‚úÖ Todos os testes backend passaram"
        echo "‚úÖ Todos os testes frontend passaram" 
        echo "‚úÖ Cobertura backend >= 80%"
        echo "‚úÖ Cobertura frontend >= 80%"
        echo "‚úÖ Build do frontend OK"
        echo "‚úÖ Build do backend OK"